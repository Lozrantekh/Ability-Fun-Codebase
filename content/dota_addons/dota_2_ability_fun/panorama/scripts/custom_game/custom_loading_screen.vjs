"use strict";function UpdatePlayersStatus(){    let playersWrapper = $("#PlayerLoadingStatusRoot")    if (playersWrapper == null) {        return;    }    let anyPlayerLoaded = false    let maxPlayers = Players.GetMaxPlayers()    for (let i = 0; i < maxPlayers; i++)    {        let playerID = i;        if (!Players.IsValidPlayerID(playerID)) {            continue;        }        anyPlayerLoaded = true        let playerInfo = Game.GetPlayerInfo(playerID)        let playerContainer = playersWrapper.FindChildTraverse("PlayerLoadingStatus" + i)        if (playerContainer == null) {            playerContainer = $.CreatePanel("Panel", playersWrapper, "PlayerLoadingStatus" + i)            playerContainer.BLoadLayoutSnippet("PlayerLoadingStatus")            playerContainer.SetHasClass("PlayerLoadingStatus", true)            let avatar = playerContainer.FindChildTraverse("PlayerLoadingAvatar")            let name = playerContainer.FindChildTraverse("PlayerLoadingName")                        if (playerInfo != null && avatar != null && name != null) {                avatar.steamid =  playerInfo["player_steamid"];                name.text = playerInfo["player_name"]            }        }        if (playerInfo != null) {            let bConnected = playerInfo["player_connection_state"] === DOTAConnectionState_t.DOTA_CONNECTION_STATE_CONNECTED;            playerContainer.SetHasClass("Connected", bConnected)        }    }    if (anyPlayerLoaded) {        playersWrapper.SetHasClass("Visible", true)    }    if (Game.GameStateIsAfter( DOTA_GameState.DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD)) {        return;    }    $.Schedule( 1.0/30.0, UpdatePlayersStatus );}function HideOriginalPanels(){    let loadingScreen = GetLoadingScreenPanel()    if (loadingScreen == null) {        return    }    let sidebar = loadingScreen.FindChildTraverse("SidebarAndBattleCupLayoutContainer")    if (sidebar != null) {        sidebar.visible = false;    }    let chat = loadingScreen.FindChildTraverse("LoadingScreenChat")    if (chat != null) {        chat.visible = false;    }}function GetLoadingScreenPanel(){    let maxAttempts = 1000    let attempt = 0    let panel = $.GetContextPanel();        while (panel) {        if (attempt > maxAttempts) {            break        }        if (panel.id === "LoadingScreen"){            return panel        };                panel = panel.GetParent();            attempt = attempt + 1    }    return null}function VerifyLocalPlayerFullyLoaded(){    let localPlayerInfo = Game.GetPlayerInfo(Game.GetLocalPlayerID())    if (localPlayerInfo != null && localPlayerInfo["player_connection_state"] != DOTAConnectionState_t.DOTA_CONNECTION_STATE_CONNECTED)    {        $.Schedule(0.1, VerifyLocalPlayerFullyLoaded)        return;    }    UpdatePlayersStatus();}(function(){        HideOriginalPanels()    VerifyLocalPlayerFullyLoaded();})();